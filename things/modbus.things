// In the traditional standard, [entity] numbers for those entities start with a digit, followed by a number of four digits in range 1–9,999:

// coils numbers start with a zero and then span from 00001 to 09999
// discrete input numbers start with a one and then span from 10001 to 19999
// input register numbers start with a three and then span from 30001 to 39999
// holding register numbers start with a four and then span from 40001 to 49999
// This translates into [entity] addresses between 0 and 9,998 in data frames.

// Note that entity begins counting at 1, data frame address at 0.

/////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/////////////////////////
    //!         !!! USEFULL LINKS  !!!
    //
    // MODBUS BINDING https://www.openhab.org/addons/bindings/modbus/
    // USE Rapid SCADA Modbus Parser TO VISUALIZE MODBUS REQUEST/RESPONSE http://modbus.rapidscada.net/
    // USE TERMITE TO TEST COMMUNICATION WITH THE DEVICE UNDER WIN10 http://s2-team.ru/wrkrs/prods/modbus-tools/termite/
    // FOR ORNO ENERGY METERS USE THE WIN10 SOFTWARE PROVIDED ON THE MANUFACTURER SITE TO TEST COMMUNICATION AND SETUP THE METER 
    // https://www.orno.pl/en/category/productData/4821/1-phase-multi-tariff-energy-meter-wtih-RS-485--100A
//

/////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/////////////////////////
    //!         !!! IMPORTANT   !!!
    //
    //! WHEN editing Things, PERFORM a binding restart or a system reboot after editing. 
    //! Changes in Things do not make it into pollers that are already running. !!!!!!
/////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/////////////////////////

/////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/////////////////////////
    //!             !!! ATTENTION !!!
    //!
    //! THE WALL THERMOSTAT MODBUS SLAVE ADDRESSES SHOULD BE SET TO START AT  0x01 (1) FOR THE FIRST THERMOSTAT
    //! AS FOLLOWS:
    //! 0x01 (1) WALL THERMOSTAT RADIANT FLOOR HEATING ROOM 1 - (TO BE INSTALLED LATER) SEE COMMENTED CODE BELLOW
    //! 0x02 (2) WALL THERMOSTAT FAN COIL (CONVECTOR) ROOM 1 - (TO BE INSTALLED LATER) 
    //! 0x03 (3) WALL THERMOSTAT RADIANT FLOOR HEATING ROOM 2 - (TO BE INSTALLED LATER)
    //! 0x04 (4) WALL THERMOSTAT FAN COIL (CONVECTOR) ROOM 1 - (TO BE INSTALLED LATER) 
    //! AND SO ON....
    //!
    //!
    //! THE ENERGY METTERS MODBUS SLAVE ADDRESSES SHOULD BE SET TO START AT  0x64 (100) FOR THE FIRST METER
    //! AS FOLLOWS:
    //!  0x64 (100) WHOLE HOUSE ENERGY METTER - (TO BE INSTALLED LATER) THREE PHASE
    //!  0x65 (101) HEAT PUMP ENERGY METTER - ORNO 517 THREE PHASE
    //!  0x66 (102) HOT WATER TANK (SOLAR) ELECTRIC HEATER ENERGY METTER - ORNO 515 SINGLE PHASE
    //! AND SO ON....
/////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/////////////////////////


/////////----------------------------------------------------------/////////////////////////
    //!             ORNO 515 SIGLE PHASE METER 
    //!
    //! ORNO 515 SIGLE PHASE METER SET AT Slave address 0x66 (102)
    //! 
 /////////----------------------------------------------------------/////////////////////////

//
// ORNO 515 ENERGY METER -SINGLE PHASE ---- HOT WATER TANK (SOLAR) ELECTRIC HEATER 
// Bus 001 Device 009: ID 1a86:7523 QinHeng Electronics HL-340 USB-Serial adapter
// 11bits data (1 start bit, 8 data bit, 1 even check bit, 1 stop bit)
// Communication commands will choose CRC check (2bytes)
// Meter ID will use 01 as default, baud rate 9600bps, but 1200bps、 2400bps、 4800bps(optional)
//
Bridge modbus:serial:energy_metters_slave102 [port="/dev/ttyUSB0",baud=9600,id=102,stopBits="1.0",parity="even",dataBits=8,encoding="rtu"]
// Bridge modbus:serial:energy_metters_slave102 [port="/dev/ttyUSB0",baud=9600,id=1,stopBits="1.0",parity="none",dataBits=8,encoding="rtu"]
// Bridge modbus:serial:energy_metters_slave102 [port="usb-1a86_USB2.0-Serial-if00-port0",baud=9600,id=102,stopBits="1.0",parity="none",dataBits=8,encoding="rtu"]
// Bridge modbus:serial:energy_metters_slave102 [port="usb-1a86_USB2.0-Serial-if00-port0",baud=9600,id=102,stopBits="1.0",parity="none",dataBits=8,encoding="rtu"]
// Bridge modbus:serial:energy_metters_slave102 [port="/dev/serial/by-id/usb-1a86_USB2.0-Serial-if00-port0",baud=9600,id=102,stopBits="1.0",parity="none",dataBits=8,encoding="rtu"]
// Bridge modbus:serial:thermostat_slave1 [port="/dev/ttyUSB0",baud=9600,id=1,stopBits="1.0",parity="none",dataBits=8,encoding="rtu"]
{  
            // readStart - Input as zero-based index number, e.g. in place of 400001 (first holding register), 
            // use the address "0". Must be between (poller start) and (poller start + poller length - 1) (inclusive).
            // Also see : https://www.openhab.org/addons/bindings/modbus/#scaling-example

            // //Holding Register start = 40001 + 1 = 40002

        // Bridge poller energy_meter_slave102_holding [ start=0, length=7, refresh=1000, type="holding", maxTries=3 ] 
        // {
        //     // readStart - Input as zero-based index number, e.g. in place of 400001 (first holding register), 
        //     // use the address "0". Must be between (poller start) and (poller start + poller length - 1) (inclusive).
        //     // Also see : https://www.openhab.org/addons/bindings/modbus/#scaling-example

        //     Thing data thermostat_slave1_onoff [ readStart="0", readValueType="int16", writeStart="0", writeValueType="int16", writeType="holding" ]
        //     Thing data thermostat_slave1_temperature [ readStart="1", readValueType="int16",  readTransform="JS(divide10.js)", writeStart="1", writeValueType="int16", writeType="holding" , writeTransform="JS(multiply10.js)" ]
        //     Thing data thermostat_slave1_ManualAuto [ readStart="2", readValueType="int16", writeStart="2", writeValueType="int16", writeType="holding"]
        //     Thing data thermostat_slave1_HeatingOnOff [ readStart="3", readValueType="int16", writeStart="3", writeValueType="int16", writeType="holding"]
        //     Thing data thermostat_slave1_set_temperature [ readStart="4", readValueType="int16",  readTransform="JS(divide10.js)", writeStart="4", writeValueType="int16", writeType="holding" , writeTransform="JS(multiply10.js)" ]
        //     Thing data thermostat_slave1_weekly_mod_set_temperature [ readStart="5", readValueType="int16",  readTransform="JS(divide10.js)", writeStart="5", writeValueType="int16", writeType="holding" , writeTransform="JS(multiply10.js)" ]
        //     // Thing data thermostat_slave1_set_temperature [ readStart="4", readValueType="int16",  readTransform="JS(divide10.js)", writeStart="4", writeValueType="int16", writeType="holding" , writeTransform="JS(multiply10.js)" ]
        //     Thing data thermostat_slave1_LockUnlock [ readStart="6", readValueType="int16", writeStart="6", writeValueType="int16", writeType="holding" ]

        // }

        // Bridge poller kWh [start = 40960, length = 2, refresh = 60000, type = "holding"]
        // {
        //     Thing data kWh [readStart = "40960", readValueType = "uint32", readTransform = "JS (divide100.js)"]
        // }
    
        // Bridge poller biernakWh [start = 40990, length = 2, refresh = 60000, type = "holding"]
        // {
        //     Thing data biernakWh [readStart = "40990", readValueType = "uint32", readTransform = "JS (divide100.js)"]
        // }
                // Frequency: 
                // Part of Data Package	Description	Value
                // 66	Slave address	0x66 (102)
                // 03	Function code	0x03 (3) - Read Holding Registers
                // 01 30	Starting address	0x0131 (305)
                // 00 01	Quantity	0x0001 (1)
                // 8D EE	CRC	0x8DEE (36334)
        // Bridge poller Hz [start = 304, length = 1, refresh = 10000, type = "holding"]
        // {
        //     Thing data Hz [readStart = "304", readValueType = "uint16", readTransform = "JS (divide100.js)"]
        // }
                // Part of Data Package	Description	Value
                // 66	Slave address	0x66 (102)
                // 03	Function code	0x03 (3) - Read Holding Registers
                // 01 31	Starting address	0x0132 (306)
                // 00 01	Quantity	0x0001 (1)
                // DC 2E	CRC	0xDC2E (56366)                
        Bridge poller volt [start = 306, length = 1, refresh = 10000, type = "holding"]
        // Bridge poller volt [start = 306, length = 1, refresh = 10000, type = "holding"]
        {
            Thing data V [readStart = "306", readValueType = "uint16", readTransform = "JS (divide100.js)"]
            // Thing data V [readStart = "306", readValueType = "uint16", readTransform = "JS (divide100.js)"]
        }
                // Part of Data Package	Description	Value
                // 66	Slave address	0x66 (102)
                // 03	Function code	0x03 (3) - Read Holding Registers
                // 01 39	Starting address	0x013A (314)
                // 00 02	Quantity	0x0002 (2)
                // 1D ED	CRC	0x1DED (7661)
        // Bridge poller ampery [start = 313, length = 2, refresh = 10000, type = "holding"]
        // {
        //     Thing data A [readStart = "313", readValueType = "uint32", readTransform = "JS (divide1000.js)"]    
        // }
                // Active power
                // Part of Data Package	Description	Value
                // 66	Slave address	0x66 (102)
                // 03	Function code	0x03 (3) - Read Holding Registers
                // 01 40	Starting address	0x0141 (321)
                // 00 02	Quantity	0x0002 (2)
                // CC 34	CRC	0xCC34 (52276)
        // Bridge poller power [start = 320, length = 2, refresh = 10000, type = "holding"]
        // {
        //     Thing data P [readStart = "320", readValueType = "uint32"]  
        // }
                // Reactive power 
                // Part of Data Package	Description	Value
                // 66	Slave address	0x66 (102)
                // 03	Function code	0x03 (3) - Read Holding Registers
                // 01 48	Starting address	0x0149 (329)
                // 00 02	Quantity	0x0002 (2)
                // 4D F6	CRC	0x4DF6 (19958)
        // Bridge poller biernapower [start = 328, length = 2, refresh = 10000, type = "holding"]
        // {
        //     Thing data biernaP [readStart = "328", readValueType = "uint32"]    
        // }
                // Apparent power 
                // Part of Data Package	Description	Value
                // 66	Slave address	0x66 (102)
                // 03	Function code	0x03 (3) - Read Holding Registers
                // 01 50	Starting address	0x0151 (337)
                // 00 02	Quantity	0x0002 (2)
                // CD F1	CRC	0xCDF1 (52721)
        // Bridge poller pozornapower [start = 336, length = 2, refresh = 10000, type = "holding"]
        // {
        //     Thing data pozornaP [readStart = "336", readValueType = "uint32"]    
        // }


// ???????
        // Bridge poller fimocy [start = 344, length = 1, refresh = 10000, type = "holding"]
        // {
        //     Thing data fimocy [readStart = "344", readValueType = "uint16", readTransform = "JS (divide1000.js)"]    
        // }           

}


/////////----------------------------------------------------------/////////////////////////

    //! END ORNO 515 SIGLE PHASE METER Slave 0x66 (102)

/////////----------------------------------------------------------/////////////////////////
// Modbus ID:
// 102 
// WRITE TO SHANGE OR USE THE ORNO WIN10 SOFTWARE...
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// 01 10	Starting address	0x0111 (273)
// 00 01	Quantity	0x0001 (1)
// 8C 24	CRC	0x8C24 (35876)

// DateTime:
// 20-02-23 16:53:33 07 
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// 81 20	Starting address	0x8121 (33057)
// 00 04	Quantity	0x0004 (4)
// 65 E8	CRC	0x65E8 (26088)
// REPLY:
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// 08	Byte count	0x08 (8)
// 14 02 17 10 35 21 07 00	Register value	0x1402 (5122), 0x1710 (5904), 0x3521 (13601), 0x0700 (1792)
// CD 8F	CRC	0xCD8F (52623)

// Grid Frequency:
// 50.00 Hz
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// 01 30	Starting address	0x0131 (305)
// 00 01	Quantity	0x0001 (1)
// 8D EE	CRC	0x8DEE (36334)

// Voltage:
// 229.84 V
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// 01 31	Starting address	0x0132 (306)
// 00 01	Quantity	0x0001 (1)
// DC 2E	CRC	0xDC2E (56366)
// REPLY:
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// 02	Byte count	0x02 (2)
// 59 C8	Register value	0x59C8 (22984)
// B6 4A	CRC	0xB64A (46666)

// Current:
// 0.000 A
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// 01 39	Starting address	0x013A (314)
// 00 02	Quantity	0x0002 (2)
// 1D ED	CRC	0x1DED (7661)

// Active Power:
// 0.000 kW
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// 01 40	Starting address	0x0141 (321)
// 00 02	Quantity	0x0002 (2)
// CC 34	CRC	0xCC34 (52276)

// Reactive Power:
// 0.000 kvar
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// 01 48	Starting address	0x0149 (329)
// 00 02	Quantity	0x0002 (2)
// 4D F6	CRC	0x4DF6 (19958)

// Apparent Power:
// 0.000 kVA
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// 01 50	Starting address	0x0151 (337)
// 00 02	Quantity	0x0002 (2)
// CD F1	CRC	0xCDF1 (52721)

// Power Factor:
// 1.000 
//
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// 01 58	Starting address	0x0159 (345)
// 00 01	Quantity	0x0001 (1)
// 0C 32	CRC	0x0C32 (3122)




// Active Energy:
// Total:0.04 kWh
// T1:0.00 kWh
// T2:0.00 kWh
// T3:0.04 kWh
// T4:0.00 kWh 
//
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// A0 00	Starting address	0xA001 (40961)
// 00 0A	Quantity	0x000A (10)
// EF DA	CRC	0xEFDA (61402)


// Reactive Energy:
// Total:0.00 kvarh
// T1:0.00 kvarh
// T2:0.00 kvarh
// T3:0.00 kvarh
// T4:0.00 kvarh 
//
// Part of Data Package	Description	Value
// 66	Slave address	0x66 (102)
// 03	Function code	0x03 (3) - Read Holding Registers
// A0 1E	Starting address	0xA01F (40991)
// 00 0A	Quantity	0x000A (10)
// 8F DC	CRC	0x8FDC (36828)




/////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/////////////////////////
// READ ALL REGISTERS:

// Modbus ID:
// 102 

// Modbus Baudrate:
// 9600;EVEN 

// LCD Display state:
// Power Factor ON
// Apparent Power ON
// Reactive Power ON
// Active Power ON
// Current ON
// Voltage ON
// Reactive Energy ON
// Active Energy ON
// Measurement mode:Active and reactive
// Number of digits:5+1
// LCD Cycle time: 5s
// Tariff: Enable
// SO output type: Active 

// WEEKDAY Tariff:
// ## 07:00 T01; 17:00 T02; 20:00 T03; 23:00 T04; 
 

// WEEKEND Tariff:
// ## 07:00 T01; 17:00 T02; 20:00 T03; 23:00 T04; 
 

// HOLIDAY Tariff:
// ## 07:00 T01; 17:00 T02; 20:00 T03; 23:00 T04; 
 

// HOLIDAY:
// ## null
 

// DateTime:
// 20-02-23 17:09:06 07 

// Grid Frequency:
// 50.00 Hz

// Voltage:
// 230.04 V

// Current:
// 0.000 A

// Active Power:
// 0.000 kW

// Reactive Power:
// 0.000 kvar

// Apparent Power:
// 0.000 kVA

// Power Factor:
// 1.000 

// Active Energy:
// Total:0.04 kWh
// T1:0.00 kWh
// T2:0.00 kWh
// T3:0.04 kWh
// T4:0.00 kWh 

// Reactive Energy:
// Total:0.00 kvarh
// T1:0.00 kvarh
// T2:0.00 kvarh
// T3:0.00 kvarh
// T4:0.00 kvarh 