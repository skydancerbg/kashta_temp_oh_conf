
// Number: ElectricPotential OU_V "Voltage [% .2f V]" <line> (OU_Counters, counters) {channel = "modbus: data: localSerial: volt: V: number"}
Number Voltage    "Voltage  [% .2f V]"  <energy>          { channel="modbus:data:energy_metters_slave102:volt:V:number" }
Number Ampers     "Ampers   [% .2f A]"  <energy>          { channel="modbus:data:energy_metters_slave102:ampers:A:number" }
Number Power      "Watts   [% d W]"  <energy>          { channel="modbus:data:energy_metters_slave102:power:P:number" }
Number Hz      "Hz   [% .2f Hz]"  <energy>          { channel="modbus:data:energy_metters_slave102:Hz:Hz:number" }
Number Reactive_power      "Instantaneous reactive power [% d var]"  <energy>          { channel="modbus:data:energy_metters_slave102:reactive_power:rP:number" }
Number Apparent_power      "Instantaneous apparent power [% d VA]"  <energy>          { channel="modbus:data:energy_metters_slave102:apparent_power:aP:number" }
Number Power_factor      "Power_factor   [%.2f]"  <energy>          { channel="modbus:data:energy_metters_slave102:power_factor:Pf:number" }
Number TotalKWh   "totalkwh   [%.2f kWh]"  <electric_meter>          { channel="modbus:data:energy_metters_slave102:totalkwh:totalkwh:number" }
Number TotalKWhT1   "totalkwhT1   [%.2f kWh]"  <electric_meter>          { channel="modbus:data:energy_metters_slave102:totalkwh:totalkwhT1:number" }
Number TotalKWhT2   "totalkwhT2   [%.2f kWh]"  <electric_meter>          { channel="modbus:data:energy_metters_slave102:totalkwh:totalkwhT2:number" }
Number TotalKWhT3   "totalkwhT3   [%.2f kWh]"  <electric_meter>          { channel="modbus:data:energy_metters_slave102:totalkwh:totalkwhT3:number" }
Number TotalKWhT4   "totalkwhT4   [%.2f kWh]"  <electric_meter>          { channel="modbus:data:energy_metters_slave102:totalkwh:totalkwhT4:number" }
Number Totalkvarh   "Meter readout reactive energy [% .2f kvar]"  <electric_meter>                  { channel="modbus:data:energy_metters_slave102:totalkvarh:totalkvarh:number" }
Number TotalkvarhT1   "totalkvarhT1   [%.2f kvar]"  <electric_meter>            { channel="modbus:data:energy_metters_slave102:totalkvarh:totalkvarhT1:number" }
Number TotalkvarhT2   "totalkvarhT2   [%.2f kvar]"  <electric_meter>            { channel="modbus:data:energy_metters_slave102:totalkvarh:totalkvarhT2:number" }
Number TotalkvarhT3   "totalkvarhT3   [%.2f kvar]"  <electric_meter>            { channel="modbus:data:energy_metters_slave102:totalkvarh:totalkvarhT3:number" }
Number TotalkvarhT4   "totalkvarhT4   [%.2f kvar]"  <electric_meter>            { channel="modbus:data:energy_metters_slave102:totalkvarh:totalkvarhT4:number" }

// To be calculated in rules:
Number TotalCostWaterHeater "Total cost in Lev [%.2f лева]" <bill> 


Number year_month   "year_month hex+encoded  [%.2f]"  <calendar>            { channel="modbus:data:energy_metters_slave102:date_time:year_month:number" }
Number date_hour    "date_hour hex+encoded   [%.2f]"  <calendar>            { channel="modbus:data:energy_metters_slave102:date_time:date_hour:number" }
Number min_sec      "min_sec hex+encoded   [%.2f]"  <calendar>            { channel="modbus:data:energy_metters_slave102:date_time:min_sec:number" }
Number not_defined  "not_defined hex+encoded   [%.2f]"  <calendar>            { channel="modbus:data:energy_metters_slave102:date_time:not_defined:number" }

Number year_month_tst   "year_month hex+encoded  [%.2f]"  <calendar>            { channel="modbus:data:energy_metters_slave102:tst_y_m:year_month:number" }
Number date_hour_tst   "date_hour hex+encoded  [%.2f]"  <calendar>            { channel="modbus:data:energy_metters_slave102:tst_d_h:date_hour:number" }









// Number OU_kWh "Energy meter status [% .2f kWh]" <line> (OU_Counters, counters) {channel = "modbus: data: localSerial: kWh: kWh: number"}
// Number: Power OU_P "Instantaneous power [% d W]" <line> (OU_Counters, gCounters) {channel = "modbus: data: localSerial: power: P: number"}
// Number: ElectricPotential OU_V "Voltage [% .2f V]" <line> (OU_Counters, counters) {channel = "modbus: data: localSerial: volt: V: number"}
// Number: ElectricCurrent OU_A "Current [% .2f A]" <line> (OU_Counters, counters) {channel = "modbus: data: localSerial: ampery: A: number"}
// Number: Frequency OU_Hz "Frequency [% .2f Hz]" <line> (OU_Counters, counters) {channel = "modbus: data: localSerial: Hz: Hz: number"}
// Number OU_fimocy "Power factor" <line> (OU_Counters, counters) {channel = "modbus: data: localSerial: fimocy: fimocy: number"}
// Number: Power OU_biernaP "Instantaneous reactive power [% d var]" <line> (OU_Counters, counters) {channel = "modbus: data: localSerial: biernapower: passiveP: number"}
// Number: Power OU_pozornaP "Instantaneous apparent power [% d VA]" <line> (OU_Counters, counters) {channel = "modbus: data: localSerial: pozornapower: pozornaP: number"}
// Number OU_biernakWh "Meter readout reactive energy [% .2f kvar]" <line> (OU_Counters, counters) {channel = "modbus: data: localSerial: biernakWh: biernakWh: number"}





// Number Thermostat1_OnOff    "Thermostat1_On/Off [%d]"  <switch>                { channel="modbus:data:thermostat_slave1:thermostat_slave1_holding:thermostat_slave1_onoff:number" }
// Number Thermostat1_temp    "Thermostat1_Temperature [%.1f]"  <temperature>          { channel="modbus:data:thermostat_slave1:thermostat_slave1_holding:thermostat_slave1_temperature:number" }
// // Number Thermostat1_temp1    "Thermostat1_Temperature testing  [%.1f]"  <temperature>          { channel="modbus:data:thermostat_slave1:thermostat_slave1_holding:thermostat_slave1_temperature:number" }
// Number Thermostat1_ManualAuto    "Thermostat1_Manual/Auto [%d]"  <temperature>      { channel="modbus:data:thermostat_slave1:thermostat_slave1_holding:thermostat_slave1_ManualAuto:number" }
// Number Thermostat1_HeatingOnOff   "Tthermostat Heating ON/OFF [%d]"  <temperature>  { channel="modbus:data:thermostat_slave1:thermostat_slave1_holding:thermostat_slave1_HeatingOnOff:number" }
// Number Thermostat1_Set_Temp    "Thermostat1_SET_Temperature [%.1f]"  <temperature>  { channel="modbus:data:thermostat_slave1:thermostat_slave1_holding:thermostat_slave1_set_temperature:number" }
// Number Thermostat1_Weekly_Mod_Set_Temp    "Thermostat1_Weekly_Mod_Set_Temp [%.1f]"  <temperature>  { channel="modbus:data:thermostat_slave1:thermostat_slave1_holding:thermostat_slave1_weekly_mod_set_temperature:number" }
// Number Thermostat1_LockUnlock   "Tthermostat Lock/Unlock [%d]"  <temperature>  { channel="modbus:data:thermostat_slave1:thermostat_slave1_holding:thermostat_slave1_LockUnlock:number" }

// // Number Thermostat1_temp    "Thermostat1_Temperature [%.1f]"  <temperature>  { channel="modbus:data:slave1:holding:holding4002:number", autoupdate="false" }